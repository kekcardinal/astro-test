---
// Import the layout
import BaseLayout from '../layouts/BaseLayout.astro';
import Hero from '../components/Hero.astro';
import Btn from '../components/Btn.astro';
import Projet from '../components/Projets.astro';
import { contentfulClient } from '../lib/contentful';
import type { EntryFieldTypes } from 'contentful';
import Filtres from '../components/Filtres.astro'

interface Projet {
  contentTypeId: "projet",
  fields: {
    "titreProjet": EntryFieldTypes.Text,
    "descriptionProjet": EntryFieldTypes.RichText,
    "imageProjet": EntryFieldTypes.Asset,
    "category":EntryFieldTypes.Text,
  }
}

// Get the full URL from the `Astro.request.url`
const currentUrl = new URL(Astro.request.url);
console.log(currentUrl); // Debugging: Check the full URL

// Retrieve the lang parameter from the query string
const lang = currentUrl.searchParams.get("lang"); // Default to 'en' if not found

console.log("LANGUE=", lang); // Debugging: Check the lang value

// Map the lang parameter to the appropriate locale
const locale = lang === "fr" ? "fr-CA" : "en-US";

//const entries = await contentfulClient.withAllLocales.getEntries<Projet>({
// Fetch the entries in French (locale "fr")
// const entries = await contentfulClient.withAllLocales.getEntries<Projet>({
//   content_type: "projet",
// });

// console.log(entries);

const entries = await contentfulClient.withAllLocales.getEntries<{
  contentTypeId: "projet",
  fields: {
    "titreProjet": EntryFieldTypes.Text,
    "descriptionProjet": EntryFieldTypes.RichText,
    "imageProjet": EntryFieldTypes.Asset,
    "category":EntryFieldTypes.Text,
  }
}>({
  content_type: "projet",
});

const projectsEn = entries.items.map(item => ({
  titreProjet: item.fields["titreProjet"]["en-US"],
  descriptionProjet: item.fields["descriptionProjet"]["en-US"],
  imageProjet: item.fields["imageProjet"]["en-US"].fields.file["en-US"].url,
  lang: "en",
  category: item.fields["category"]["en-US"],
}));

const projectsFr = entries.items.map(item => ({
  titreProjet: item.fields["titreProjet"]["fr-CA"],
  descriptionProjet: item.fields["descriptionProjet"]["fr-CA"],
  imageProjet: item.fields["imageProjet"]["en-US"].fields.file["en-US"].url,
  lang: "fr",
  category: item.fields["category"]["en-US"],
}));

const filtresBtnEN = entries.items.map(item => ({
  lang:"en",
  filtre:item.fields["category"]["en-US"],
  category:item.fields["category"]["en-US"],
}));


const filtresBtnFR = entries.items.map(item => ({
  lang:"fr",
  filtre:item.fields["category"]["en-US"],
  category:item.fields["category"]["fr-CA"],
}));

const uniqueFiltresEN = Array.from(
  new Set(filtresBtnEN.map(filtre => filtre.category))
).map(uniqueCategory => 
  filtresBtnEN.find(filtre => filtre.category === uniqueCategory)
);

// Create unique French filters
const uniqueFiltresFR = Array.from(
  new Set(filtresBtnFR.map(filtre => filtre.category))
).map(uniqueCategory => 
  filtresBtnFR.find(filtre => filtre.category === uniqueCategory)
);



---

<!-- Use the layout and pass content into the slot -->
<BaseLayout mainClass="projets">
	<Hero imageUrl="/images/buildings/building.webp" altText="About Page Hero" 
    texte_fr="Vous-aimeriez en faire partie?"
    texte_en="You want to be a part of our projects?"
    texte_btn_fr="Contactez-nous"
    texte_btn_en="Contact-us"
    lien="/contact/"/>


    <section class="overlay-section-projets">
        <h1 lang="fr" class="titre-projets">
          Filtrez par type d’établissement
        </h1>
        <h1 lang="en" class="titre-projets">Sort by building type</h1>
        <div class="conteneur-filtre">
            {uniqueFiltresEN.length > 0 ? (
              uniqueFiltresEN.map((filtre) => (
                <Filtres {...filtre} />
              ))
            ) : (
              <p>No projects found.</p>
            )}

            {uniqueFiltresFR.length > 0 ? (
              uniqueFiltresFR.map((filtre) => (
                <Filtres {...filtre} />
              ))
            ) : (
              <p>No projects found.</p>
            )}
        </div>

        <article>
          {projectsEn.length > 0 ? (
            projectsEn.map((project) => (
              <Projet {...project} />
            ))
          ) : (
            <p>No projects found.</p>
          )}
        </article>
        
        <article>
          {projectsFr.length > 0 ? (
            projectsFr.map((project) => (
              <Projet {...project} />
            ))
          ) : (
            <p>No projects found.</p>
          )}
        </article>

        
</BaseLayout>